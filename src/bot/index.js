const TelegramBot = require('node-telegram-bot-api');
const supabase = require('../config/supabase');
const outline = require('../outline/api');
const path = require('path');
require('dotenv').config();
const fetch = (...args) => import('node-fetch').then(mod => mod.default(...args));

const token = process.env.TELEGRAM_BOT_TOKEN;
const bot = new TelegramBot(token, { polling: true });

// –ö—É—Ä—Å: 1 –∑–≤–µ–∑–¥–∞ = 2 —Ä—É–±–ª—è
// const STAR_RATE = 2;

// CryptoBot –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const CRYPTO_BOT_TOKEN = process.env.CRYPTO_BOT_TOKEN;
const CRYPTO_BOT_ASSET = 'USDT';
const CRYPTO_BOT_NETWORK = 'TRC20';
const CRYPTO_BOT_AMOUNTS = [
  { rub: 180, usdt: 2.4, bonus: 7 },
  { rub: 450, usdt: 5.7, bonus: 15 },
  { rub: 850, usdt: 11, bonus: 30 }
];

// –ú–∞–ø–ø–∏–Ω–≥: –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã -> —ç–º–æ–¥–∑–∏ (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –≤—Ä—É—á–Ω—É—é)
const countryEmojis = {
  RU: 'üá∑üá∫',
  UA: 'üá∫üá¶',
  US: 'üá∫üá∏',
  DE: 'üá©üá™',
  NL: 'üá≥üá±',
  FR: 'üá´üá∑',
  // –î–æ–±–∞–≤—å —Å–≤–æ–∏ —Å—Ç—Ä–∞–Ω—ã –∏ —ç–º–æ–¥–∑–∏ –Ω–∏–∂–µ
  // 'CN': 'üá®üá≥',
  // 'KZ': 'üá∞üáø',
};

let botUsername = '';
bot.getMe().then(me => { botUsername = me.username; });

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start(?:\s+ref[_-]?([\w-]+))?/, async (msg, match) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const refId = match[1] ? (match[1].startsWith('ad-') ? match[1] : match[1]) : null;

  // –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–∫–ª–∞–º–Ω–∞—è —Å—Å—ã–ª–∫–∞
  if (refId && refId.startsWith('ad-')) {
    try {
      await fetch('http://localhost:3000/api/ad-ref-click', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ referrer_id: refId })
      });
    } catch (e) {
      // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  let { data: user } = await supabase
    .from('users')
    .select('*')
    .eq('telegram_id', userId)
    .single();
  if (!user) {
    let referred_by = null;
    if (refId && !refId.startsWith('ad-')) {
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ
      const { data: refUser } = await supabase
        .from('users')
        .select('id')
        .eq('telegram_id', refId)
        .single();
      if (refUser) referred_by = refUser.id;
    }
    // –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: newUser } = await supabase
      .from('users')
      .insert([
        {
          telegram_id: userId,
          username: msg.from.username,
          subscription_end: null,
          referred_by,
          ad_ref_id: refId && refId.startsWith('ad-') ? refId : null,
          country: msg.from.language_code || null
        }
      ])
      .select()
      .single();
    user = newUser;
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ referrals
    if (referred_by) {
      await supabase.from('referrals').insert([
        { referrer_id: referred_by, referred_id: user.id }
      ]);
    }
    // –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–∫–ª–∞–º–Ω–∞—è —Å—Å—ã–ª–∫–∞, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º registrations
    if (refId && refId.startsWith('ad-')) {
      const { data: adData, error: adErr } = await supabase
        .from('ad_ref_links')
        .select('registrations')
        .eq('referrer_id', refId)
        .single();
      if (!adErr && adData) {
        await supabase
          .from('ad_ref_links')
          .update({ registrations: (adData.registrations || 0) + 1 })
          .eq('referrer_id', refId);
      }
    }
  } else if (!user.country && msg.from.language_code) {
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å, –Ω–æ —Å—Ç—Ä–∞–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º
    await supabase
      .from('users')
      .update({ country: msg.from.language_code })
      .eq('id', user.id);
  }

  const welcomeText = `<b>–ü—Ä–∏–≤–µ—Ç,</b> üëã\n\n` +
    'üíª –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ StarShip VPN!:\n\n' +
    'üéÅ <b>–¢–≤–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ 3 –¥–Ω—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: <code>Star</code></b>\n\n' +
    '‚úÖ –î–æ 3 —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–∞ 1 –ø–æ–¥–ø–∏—Å–∫—É\n' +
    'üì∫ YouTube –±–µ–∑ —Ä–µ–∫–ª–∞–º—ã ‚Äî —Å–º–æ—Ç—Ä–∏ —Ä–æ–ª–∏–∫–∏ –±–µ–∑ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π –∏ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫\n' +
    'üåç –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Å–∞–π—Ç–∞–º ‚Äî –Ω–∏–∫–∞–∫–∏—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫, –≥–¥–µ –±—ã –≤—ã –Ω–∏ –Ω–∞—Ö–æ–¥–∏–ª–∏—Å—å.\n' +
    'üö´ –ù–∏–∫–∞–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Å–∫–æ—Ä–æ—Å—Ç–∏ ‚Äî –ø–æ–ª–Ω–∞—è —Å–≤–æ–±–æ–¥–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏.\n' +
    '‚öôÔ∏è –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ ‚Äî –ª–µ–≥–∫–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∑–∞ 1 –º–∏–Ω—É—Ç—É –Ω–∞ iPhone, Android, –ü–ö, –∏ macOS.\n' +
    'üîí –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å.\n' +
    'üíµ –í—Å–µ–≥–æ 180‚ÇΩ –≤ –º–µ—Å—è—Ü ‚Äî –±–µ–∑ —Å–∫—Ä—ã—Ç—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –∏ —Ä–µ–∫–ª–∞–º—ã.\n' +
    'üí≥ –ù–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏ –Ω–∞–ø—Ä—è–º—É—é –ø–æ –∫–∞—Ä—Ç–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö.\n\n' +
    'üîå–ù–∞—à VPN –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ Iphone, Android, –ü–ö, macOS –≤ –≤–∏–¥–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.';

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
  bot.sendPhoto(chatId, path.join(__dirname, 'assets', 'photo.png'), {
    caption: welcomeText,
    parse_mode: 'HTML',
    reply_markup: {
      keyboard: [
        ['üí≥ –ö—É–ø–∏—Ç—å/–ü—Ä–æ–¥–ª–∏—Ç—å'],
        ['üí∏ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', 'üéÅ –ü—Ä–æ–º–æ–∫–æ–¥', 'üìÖ –î–µ–π—Å—Ç–≤–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏'],
        ['üåê –í—ã–±—Ä–∞—Ç—å —Å–µ—Ä–≤–µ—Ä', 'üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', 'üí¨ –ü–æ–º–æ—â—å'],
        ['üîë –ú–æ–∏ –∫–ª—é—á–∏', 'üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞']
      ],
      resize_keyboard: true
    }
  }, {
    contentType: 'image/png'
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å —Å–µ—Ä–≤–µ—Ä"
bot.onText(/–í—ã–±—Ä–∞—Ç—å —Å–µ—Ä–≤–µ—Ä/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { data: user } = await supabase
    .from('users')
    .select('id, subscription_end')
    .eq('telegram_id', userId)
    .single();
  if (!user) {
    bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    return;
  }
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏
  const now = new Date();
  if (!user.subscription_end || new Date(user.subscription_end) < now) {
    bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞.');
    return;
  }
  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤
  const { data: servers } = await supabase
    .from('servers')
    .select('id, country, status')
    .eq('status', 'online');
  if (!servers || servers.length === 0) {
    bot.sendMessage(chatId, '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    return;
  }
  bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:', {
    reply_markup: {
      inline_keyboard: servers.map(s => [{
        text: `${countryEmojis[s.country] || ''} ${s.country}`.trim(),
        callback_data: `server_${s.id}`
      }])
    }
  });
});

// –í—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ—Å–ª–µ —Ç–∞—Ä–∏—Ñ–∞
const userSubChoice = {};
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const data = query.data;
  const userId = query.from.id;

  // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ç–∞—Ä–∏—Ñ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤
  if (data.startsWith('sub_')) {
    const months = parseInt(data.split('_')[1]);
    userSubChoice[userId] = { months };
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤
    const { data: servers } = await supabase
      .from('servers')
      .select('id, country, status')
      .eq('status', 'online');
    if (!servers || servers.length === 0) {
      bot.sendMessage(chatId, '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      return;
    }
    bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:', {
      reply_markup: {
        inline_keyboard: servers.map(s => [{
          text: `${countryEmojis[s.country] || ''} ${s.country}`.trim(),
          callback_data: `server_${s.id}`
        }])
      }
    });
    return;
  }

  // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Å–µ—Ä–≤–µ—Ä ‚Äî –≤—ã–¥–∞—ë–º –∫–ª—é—á
  if (data.startsWith('server_')) {
    const serverId = data.replace('server_', '');
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: user } = await supabase
      .from('users')
      .select('id, subscription_end')
      .eq('telegram_id', userId)
      .single();
    if (!user) {
      bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      return;
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏
    const now = new Date();
    if (!user.subscription_end || new Date(user.subscription_end) < now) {
      bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞.');
      return;
    }
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await supabase.from('outline_keys').delete().eq('user_id', user.id);
    // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    const { data: server } = await supabase
      .from('servers')
      .select('*')
      .eq('id', serverId)
      .single();
    if (!server) {
      bot.sendMessage(chatId, '–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      return;
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∫–ª—é—á–µ–π
    const { count: keysCount, error: keysCountError } = await supabase
      .from('outline_keys')
      .select('id', { count: 'exact', head: true })
      .eq('server_id', server.id);
    if (keysCountError) {
      bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞ –∫–ª—é—á–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      return;
    }
    if (server.max_keys && keysCount >= server.max_keys) {
      bot.sendMessage(chatId, `‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä ${server.name} (${server.country}) –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω.\n\n ‚öôÔ∏è –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º —Å–µ—Ä–≤–µ—Ä–∞\n\n üåç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–µ—Ä.`);
      return;
    }
    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—ë–º Outline API –∫–ª–∏–µ–Ω—Ç
    const OutlineApi = require('../outline/api');
    const outline = OutlineApi.createInstance(server.api_url, server.cert_sha256);
    try {
      const key = await outline.createKey();
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á –≤ outline_keys
      const { error } = await supabase.from('outline_keys').insert([
        {
          user_id: user.id,
          outline_key_id: key.id,
          access_url: key.accessUrl,
          server_id: server.id
        }
      ]);
      if (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞:', error.message);
        bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–ª—é—á–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
        return;
      }
      bot.sendMessage(chatId, `–í–∞—à VPN –∫–ª—é—á –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ ${server.name} ${server.country}:\n\n<code>${key.accessUrl}</code>`, {
        parse_mode: 'HTML'
      });
    } catch (e) {
      bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∫–ª—é—á–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
    return;
  }

  // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–≤—ë–∑–¥
  if (data.startsWith('manual_star_topup_')) {
    const stars = Number(data.replace('manual_star_topup_', ''));
    bot.sendMessage(chatId, `–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É ${stars} –∑–≤—ë–∑–¥ —á–µ—Ä–µ–∑ Telegram Stars (–∫–Ω–æ–ø–∫–∞ üí´ –≤–Ω–∏–∑—É —á–∞—Ç–∞). –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–≤—ë–∑–¥ –±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${stars * STAR_RATE}‚ÇΩ.`);
    bot.answerCallbackQuery(query.id);
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ inline_keyboard
  if (data === 'choose_server_list') {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: user } = await supabase
      .from('users')
      .select('id, subscription_end')
      .eq('telegram_id', userId)
      .single();
    if (!user) {
      bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      return;
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏
    const now = new Date();
    if (!user.subscription_end || new Date(user.subscription_end) < now) {
      bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞.');
      return;
    }
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤
    const { data: servers } = await supabase
      .from('servers')
      .select('id, name, country, status')
      .eq('status', 'online');
    if (!servers || servers.length === 0) {
      bot.sendMessage(chatId, '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      return;
    }
    bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:', {
      reply_markup: {
        inline_keyboard: servers.map(s => [{
          text: `${countryEmojis[s.country] || ''} ${s.country}`.trim(),
          callback_data: `server_${s.id}`
        }])
      }
    });
    return;
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–≤—ë–∑–¥ –∏ –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–≤—ë–∑–¥
  if (msg.star_count) {
    console.log('–ü–æ–ª—É—á–µ–Ω—ã –∑–≤—ë–∑–¥—ã:', {
      star_count: msg.star_count,
      raw_message: msg
    });

    const stars = Number(msg.star_count);
    const rub = Number(stars) * Number(STAR_RATE);

    console.log('–†–∞—Å—á—ë—Ç —Å—É–º–º—ã:', {
      stars,
      STAR_RATE,
      rub,
      isNaN_stars: isNaN(stars),
      isNaN_rub: isNaN(rub)
    });

    if (isNaN(stars) || isNaN(rub)) {
      console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞:', { stars, rub });
      bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
      return;
    }

    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: user, error: userError } = await supabase
        .from('users')
        .select('balance')
        .eq('telegram_id', userId)
        .single();

      if (userError) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userError);
        throw userError;
      }

      console.log('–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:', user?.balance);

      const newBalance = Number(user?.balance || 0) + rub;
      
      const { error: updateError } = await supabase
        .from('users')
        .update({ balance: newBalance })
        .eq('telegram_id', userId);

      if (updateError) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', updateError);
        throw updateError;
      }

      console.log('–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—ë–Ω:', { newBalance });

      bot.sendMessage(chatId, `‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${rub}‚ÇΩ —á–µ—Ä–µ–∑ Telegram Stars (–ø–æ–ª—É—á–µ–Ω–æ ${stars} –∑–≤—ë–∑–¥).\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${newBalance}‚ÇΩ`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
      bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.');
    }
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É
  if (supportInputState[chatId] && msg.text && !msg.text.startsWith('/')) {
    const question = msg.text.trim();
    supportInputState[chatId] = false;
    
    try {
      const { data: user } = await supabase
        .from('users')
        .select('id')
        .eq('telegram_id', userId)
        .single();
        
      if (!user) {
        bot.sendMessage(chatId, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        return;
      }
      
      const { error } = await supabase
        .from('support_tickets')
        .insert([{
          user_id: user.id,
          question,
          status: 'open'
        }]);
        
      if (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞:', error);
        bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        return;
      }
      
      bot.sendMessage(chatId, '–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–µ:', error);
      bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
  if (promoInputState[chatId] && msg.text && !msg.text.startsWith('/')) {
    const code = msg.text.trim();
    promoInputState[chatId] = false;
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: user } = await supabase
      .from('users')
      .select('id, subscription_end')
      .eq('telegram_id', userId)
      .single();
    if (!user) {
      bot.sendMessage(chatId, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      return;
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
    const { data: promo } = await supabase
      .from('promo_codes')
      .select('*')
      .eq('code', code)
      .eq('is_active', true)
      .single();
    if (!promo) {
      bot.sendMessage(chatId, '–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.');
      return;
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    const now = new Date();
    if (promo.expires_at && new Date(promo.expires_at) < now) {
      bot.sendMessage(chatId, '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—Ç–µ–∫.');
      return;
    }
    if (promo.max_uses && promo.used_count >= promo.max_uses) {
      bot.sendMessage(chatId, '–ü—Ä–æ–º–æ–∫–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω - –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π.');
      return;
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥
    const { data: used } = await supabase
      .from('used_promo_codes')
      .select('id')
      .eq('user_id', user.id)
      .eq('promo_id', promo.id)
      .single();
    if (used) {
      bot.sendMessage(chatId, '–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥.');
      return;
    }
    // –ù–∞—á–∏—Å–ª—è–µ–º –¥–Ω–∏
    let newDate = new Date();
    if (user.subscription_end && new Date(user.subscription_end) > newDate) {
      newDate = new Date(user.subscription_end);
    }
    newDate.setDate(newDate.getDate() + promo.days);
    await supabase.from('users').update({ subscription_end: newDate.toISOString() }).eq('id', user.id);
    await supabase.from('used_promo_codes').insert([{ user_id: user.id, promo_id: promo.id }]);
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
    await supabase
      .from('promo_codes')
      .update({ 
        used_count: promo.used_count + 1,
        is_active: !promo.max_uses || promo.used_count + 1 < promo.max_uses
      })
      .eq('id', promo.id);
    bot.sendMessage(chatId, `–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –¥–æ ${newDate.toLocaleString()}`);
  }
});

const promoInputState = {};

bot.onText(/–ü—Ä–æ–º–æ–∫–æ–¥/, async (msg) => {
  const chatId = msg.chat.id;
  promoInputState[chatId] = true;
  bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:');
});

const supportInputState = {};

bot.onText(/–ü–æ–º–æ—â—å/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { data: user } = await supabase
    .from('users')
    .select('id')
    .eq('telegram_id', userId)
    .single();
    
  if (!user) {
    bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start');
    return;
  }
  
  supportInputState[chatId] = true;
  bot.sendMessage(chatId, '–û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è:');
});

// –ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞ —Ä—É–±–ª–∏ –∏ –∑–≤—ë–∑–¥—ã
bot.onText(/–ö—É–ø–∏—Ç—å\/–ü—Ä–æ–¥–ª–∏—Ç—å/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const { data: user } = await supabase
    .from('users')
    .select('balance')
    .eq('telegram_id', userId)
    .single();
  const tariffs = [
    { months: 1, price: 180, stars: 100 },
    { months: 3, price: 450, stars: 250 },
    { months: 6, price: 850, stars: 750 }
  ];
  const text = `
  üí≥ <b>üöÄ –¢–∞—Ä–∏—Ñ—ã:</b>\n
  <b>‚ú® 1 –º–µ—Å—è—Ü</b> - 180‚ÇΩ
  <b>‚ú® 3 –º–µ—Å—è—Ü–∞</b> - 450‚ÇΩ (—ç–∫–æ–Ω–æ–º–∏—è 90‚ÇΩ)
  <b>‚ú® 6 –º–µ—Å—è—Ü–µ–≤</b> - 850‚ÇΩ (—ç–∫–æ–Ω–æ–º–∏—è 250‚ÇΩ)\n
  <b>üîí –í –ø–æ–¥–ø–∏—Å–∫—É –≤–∫–ª—é—á–µ–Ω–æ:</b>\n
  <b>‚Ä¢ YouTube –±–µ–∑ —Ä–µ–∫–ª–∞–º—ã</b>
  <b>‚Ä¢ –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å</b>
  <b>‚Ä¢ –õ–æ–∫–∞—Ü–∏–∏: üá≥üá± üá´üá∑ üá∏üá¨ üá©üá™ </b>
  <b>‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7</b>\n
  <b>üîπ –ö–∞–∫ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å:</b>\n
  1Ô∏è‚É£ –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ Stars –∏–ª–∏ USDT
  2Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ —Ä–∞–∑–¥–µ–ª <b>¬´–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å¬ª</b>, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ –±–∞–ª–∞–Ω—Å –ø–æ—Å—Ç—É–ø–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n
  <b>üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:</b>`;
  
  bot.sendPhoto(chatId, path.join(__dirname, 'assets', 'photo.png'), {
    caption: text,
    parse_mode: 'HTML',
    reply_markup: {
      inline_keyboard: [tariffs.map(t => ({ text: `${t.months} –º–µ—Å. - ${t.price}‚ÇΩ`, callback_data: `buy_sub_rub_${t.months}` }))]
    }
  }, {
    contentType: 'image/png'
  });
});

bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const userId = query.from.id;
  if (query.data.startsWith('buy_sub_rub_')) {
    const months = Number(query.data.replace('buy_sub_rub_', ''));
    const prices = { 1: 180, 3: 450, 6: 850 };
    const price = prices[months];
    const { data: user } = await supabase
      .from('users')
      .select('balance, subscription_end')
      .eq('telegram_id', userId)
      .single();
    if (!user || (user.balance || 0) < price) {
      bot.sendMessage(chatId, `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ ${price}‚ÇΩ, —É –≤–∞—Å ${user?.balance || 0}‚ÇΩ.`);
      bot.answerCallbackQuery(query.id);
      return;
    }
    // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏ –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    let newDate = new Date();
    if (user.subscription_end && new Date(user.subscription_end) > newDate) {
      newDate = new Date(user.subscription_end);
    }
    newDate.setMonth(newDate.getMonth() + months);
    await supabase
      .from('users')
      .update({
        balance: user.balance - price,
        subscription_end: newDate.toISOString()
      })
      .eq('telegram_id', userId);
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ —Ä–µ–∫–ª–∞–º–Ω–æ–π —Å—Å—ã–ª–∫–µ, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º paid
    const { data: regUser } = await supabase
      .from('users')
      .select('referred_by, ad_ref_id')
      .eq('telegram_id', userId)
      .single();
    if (regUser && regUser.referred_by === null && regUser.ad_ref_id) {
      const { data: adRef } = await supabase
        .from('ad_ref_links')
        .select('referrer_id, paid')
        .eq('referrer_id', regUser.ad_ref_id)
        .single();
      if (adRef) {
        await supabase
          .from('ad_ref_links')
          .update({ paid: (adRef.paid || 0) + 1 })
          .eq('referrer_id', adRef.referrer_id);
      }
    }
    bot.sendMessage(chatId, `‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ –Ω–∞ ${months} –º–µ—Å.\n–°–ø–∏—Å–∞–Ω–æ: ${price}‚ÇΩ\n–û—Å—Ç–∞—Ç–æ–∫: ${user.balance - price}‚ÇΩ\n–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${newDate.toLocaleDateString()}`);
    bot.answerCallbackQuery(query.id);
    return;
  }
  if (query.data.startsWith('copy_key_')) {
    const keyIndex = Number(query.data.replace('copy_key_', ''));
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: user } = await supabase
      .from('users')
      .select('id, subscription_end')
      .eq('telegram_id', userId)
      .single();
    if (!user) {
      bot.answerCallbackQuery(query.id, { text: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', show_alert: true });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏
    const now = new Date();
    if (!user.subscription_end || new Date(user.subscription_end) < now) {
      bot.answerCallbackQuery(query.id, { text: '‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏', show_alert: true });
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: keys } = await supabase
      .from('outline_keys')
      .select('access_url')
      .eq('user_id', user.id);
    if (!keys || !keys[keyIndex]) {
      bot.answerCallbackQuery(query.id, { text: '–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω', show_alert: true });
      return;
    }
    bot.answerCallbackQuery(query.id, { text: '–ö–ª—é—á —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!', show_alert: false });
    bot.sendMessage(chatId, `üîë <b>–í–∞—à VPN –∫–ª—é—á:</b>\n<code>${keys[keyIndex].access_url}</code>`, { parse_mode: 'HTML' });
    return;
  }
  // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ...
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–î–µ–π—Å—Ç–≤–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏' (–∏ —É–±–∏—Ä–∞—é –ë–∞–ª–∞–Ω—Å)
bot.onText(/^üìÖ –î–µ–π—Å—Ç–≤–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏$/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { data: user } = await supabase
    .from('users')
    .select('balance, subscription_end')
    .eq('telegram_id', userId)
    .single();
  let text = `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>${user?.balance || 0}‚ÇΩ</b>\n`;
  if (!user || !user.subscription_end) {
    text += '\n‚è≥ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.';
  } else {
    const end = new Date(user.subscription_end);
    const now = new Date();
    if (end < now) {
      text += `\n‚è≥ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞.`;
    } else {
      const daysLeft = Math.ceil((end - now) / (1000 * 60 * 60 * 24));
      text += `\n‚è≥ –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: <b>${end.toLocaleString()}</b>\n–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: <b>${daysLeft}</b>`;
    }
  }

  bot.sendPhoto(chatId, path.join(__dirname, 'assets', 'photo.png'), {
    caption: text,
    parse_mode: 'HTML'
  }, {
    contentType: 'image/png'
  });
});

// –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ (—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞)
bot.onText(/–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
  const { data: user } = await supabase
    .from('users')
    .select('referral_count, referral_earnings, balance')
    .eq('telegram_id', userId)
    .single();
    
  const refLink = `https://t.me/${botUsername}?start=ref_${userId}`;
  
  const message = `üéØ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n` +
    `üí∞ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä—ã–π –æ—Ñ–æ—Ä–º–∏–ª –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è <b>10 —Ä—É–±–ª–µ–π</b> –Ω–∞ –±–∞–ª–∞–Ω—Å.\n` +
    `‚ö°Ô∏è –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n` +
    `üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n` +
    `üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>${user?.referral_count || 0}</b>\n` +
    `üíé –°—É–º–º–∞—Ä–Ω—ã–π –¥–æ—Ö–æ–¥: <b>${user?.referral_earnings || 0} —Ä—É–±–ª–µ–π</b>\n\n` +
    `üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n` +
    `<code>${refLink}</code>`;
  
  bot.sendPhoto(chatId, path.join(__dirname, 'assets', 'photo.png'), {
    caption: message,
    parse_mode: 'HTML'
  }, {
    contentType: 'image/png'
  });
});

// –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å ‚Äî –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞
bot.onText(/–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å/, async (msg) => {
  const chatId = msg.chat.id;
  const text = 
    'üí´ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>\n\n' +
    'üéÅ <b>–ë–æ–Ω—É—Å—ã –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ USDT:</b>\n' +
    '‚îî 180 —Ä—É–±–ª–µ–π + 7 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n' +
    '‚îî 260 —Ä—É–±–ª–µ–π + 15 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n' +
    '‚îî 430 —Ä—É–±–ª–µ–π + 30 –¥–Ω–µ–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ\n\n' +
    'üí≥ <b>–°–ø–æ—Å–æ–± 1: USDT (CryptoBot)</b>\n' +
    '1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "CryptoBot (USDT)"\n' +
    '2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è\n' +
    '3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "–û–ø–ª–∞—Ç–∏—Ç—å"\n' +
    '4Ô∏è‚É£ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n' +
    '‚≠ê <b>–°–ø–æ—Å–æ–± 2: Telegram Stars (–ö–∞—Ä—Ç–∞)</b>\n' +
    '1Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞ Telegram @PremiumBot\n' +
    '2Ô∏è‚É£ –ß–µ—Ä–µ–∑ –º–µ–Ω—é –≤—ã–±–µ—Ä–∏—Ç–µ /stars\n' +
    '3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "–ö—É–ø–∏—Ç—å –∑–≤–µ–∑–¥—ã"\n' +
    '4Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ\n' +
    '5Ô∏è‚É£ –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è "Telegram Stars"';

  bot.sendPhoto(chatId, path.join(__dirname, 'assets', 'photo.png'), {
    caption: text,
    parse_mode: 'HTML',
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'CryptoBot (USDT)', callback_data: 'topup_cryptobot' },
          { text: '‚≠ê Telegram Stars', callback_data: 'topup_stars' }
        ]
      ]
    }
  }, {
    contentType: 'image/png'
  });
});

const STARS_PACKS = [
  { rub: 180, stars: 100, label: '‚≠ê 100 Stars - 180‚ÇΩ' },
  { rub: 450, stars: 250, label: '‚≠ê 250 Stars - 450‚ÇΩ' },
  { rub: 850, stars: 750, label: '‚≠ê 750 Stars - 850‚ÇΩ' }
];

bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const userId = query.from.id;
  
  if (query.data === 'topup_cryptobot') {
    bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:', {
      reply_markup: {
        inline_keyboard: CRYPTO_BOT_AMOUNTS.map(p => [{
          text: `${p.rub}‚ÇΩ (${p.usdt} USDT) + ${p.bonus} –¥–Ω–µ–π –±–æ–Ω—É—Å`,
          callback_data: `cryptobot_amount_${p.rub}`
        }])
      }
    });
    return;
  }

  if (query.data.startsWith('cryptobot_amount_')) {
    const rub = Number(query.data.replace('cryptobot_amount_', ''));
    const amount = CRYPTO_BOT_AMOUNTS.find(p => p.rub === rub);
    
    if (!amount) {
      bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: —Å—É–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    try {
      // –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ CryptoBot API
      const response = await fetch('https://pay.crypt.bot/api/createInvoice', {
        method: 'POST',
        headers: {
          'Crypto-Pay-API-Token': CRYPTO_BOT_TOKEN,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          asset: CRYPTO_BOT_ASSET,
          amount: amount.usdt,
          network: CRYPTO_BOT_NETWORK,
          description: `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ ${rub}‚ÇΩ`,
          paid_btn_name: 'callback',
          paid_btn_url: `https://t.me/${botUsername}?start=paid_${rub}_${userId}`,
          allow_comments: false,
          allow_anonymous: false,
          payload: `cryptobot_topup_${rub}_${userId}_${Date.now()}`
        })
      });

      const data = await response.json();
      
      if (!data.ok) {
        throw new Error(data.error);
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
      bot.sendMessage(chatId, 
        `üí≥ –û–ø–ª–∞—Ç–∞ ${amount.usdt} USDT (${rub}‚ÇΩ)\n\n` +
        `1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n` +
        `<a href="${data.result.pay_url}">–û–ø–ª–∞—Ç–∏—Ç—å ${amount.usdt} USDT</a>\n\n` +
        `2Ô∏è‚É£ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n` +
        `‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –æ–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ —Å–µ—Ç–∏ ${CRYPTO_BOT_NETWORK}`,
        { parse_mode: 'HTML', disable_web_page_preview: true }
      );

    } catch (error) {
      console.error('CryptoBot error:', error);
      bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
    return;
  }

  if (query.data === 'topup_stars') {
    bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:', {
      reply_markup: {
        inline_keyboard: STARS_PACKS.map(p => [{
          text: p.label,
          callback_data: `stars_amount_${p.rub}`
        }])
      }
    });
    return;
  }
  if (query.data.startsWith('stars_amount_')) {
    const rub = Number(query.data.replace('stars_amount_', ''));
    const pack = STARS_PACKS.find(p => p.rub === rub);
    if (!pack) {
      bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: —Å—É–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }
    const payload = `stars_topup_${pack.stars}_${userId}_${Date.now()}`;
    bot.sendInvoice(
      chatId,
      '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞',
      `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ ${pack.stars} –∑–≤—ë–∑–¥ —á–µ—Ä–µ–∑ Telegram Stars.`,
      payload,
      '', // provider_token –ø—É—Å—Ç–æ–π –¥–ª—è digital goods
      'XTR',
      [{ label: `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ ${pack.stars} –∑–≤—ë–∑–¥`, amount: pack.stars }],
      {
        need_name: false,
        need_phone_number: false,
        need_email: false,
        is_flexible: false
      }
    );
    return;
  }
  // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ...
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã Stars
bot.on('successful_payment', async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const payload = msg.successful_payment.invoice_payload;

  try {
    // payload: stars_topup_<stars>_<userId>_<timestamp>
    if (payload && payload.startsWith('stars_topup_')) {
      const parts = payload.split('_');
      const stars = Number(parts[2]);
      
      // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø–∞–∫–µ—Ç
      const pack = STARS_PACKS.find(p => p.stars === stars);
      if (!pack) {
        throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞–∫–µ—Ç –∑–≤–µ–∑–¥: ${stars}`);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —ç—Ç–æ—Ç –ø–ª–∞—Ç–µ–∂
      const { data: existingPayment } = await supabase
        .from('payments')
        .select('id')
        .eq('invoice_payload', payload)
        .single();

      if (existingPayment) {
        bot.sendMessage(chatId, '–≠—Ç–æ—Ç –ø–ª–∞—Ç–µ–∂ —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ä–∞–Ω–µ–µ.');
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
      const { data: user } = await supabase
        .from('users')
        .select('balance')
        .eq('telegram_id', userId)
        .single();

      const newBalance = (user?.balance || 0) + pack.rub;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
      await supabase.from('payments').insert([{
        user_id: userId,
        amount: pack.rub,
        stars: stars,
        invoice_payload: payload,
        status: 'completed',
        created_at: new Date().toISOString()
      }]);

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await supabase
        .from('users')
        .update({ balance: newBalance })
        .eq('telegram_id', userId);

      bot.sendMessage(chatId, `‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${pack.rub}‚ÇΩ —á–µ—Ä–µ–∑ Telegram Stars (–ø–æ–ª—É—á–µ–Ω–æ ${stars} –∑–≤—ë–∑–¥).\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${newBalance}‚ÇΩ`);
    }
  } catch (error) {
    console.error('Payment processing error:', error);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
    await supabase.from('payment_errors').insert([{
      user_id: userId,
      invoice_payload: payload,
      error_message: error.message,
      created_at: new Date().toISOString()
    }]);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.sendMessage(chatId, 
      '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞.\n\n' +
      '–ù–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å, –≤–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ú—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n' +
      '–ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
    );
  }
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø–ª–∞—Ç–µ–∂–∞
bot.on('pre_checkout_query', async (query) => {
  try {
    await bot.answerPreCheckoutQuery(query.id, true);
  } catch (error) {
    console.error('Pre-checkout error:', error);
    await bot.answerPreCheckoutQuery(query.id, false, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"
bot.onText(/^üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è$/, async (msg) => {
  const chatId = msg.chat.id;
  bot.sendPhoto(chatId, path.join(__dirname, 'assets', 'photo.png'), {
    caption: '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:',
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'Android', callback_data: 'howto_android' },
          { text: 'PC', callback_data: 'howto_pc' },
          { text: 'iOS', callback_data: 'howto_ios' }
        ]
      ]
    }
  });
});

// –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  if (query.data === 'howto_android') {
    bot.sendMessage(chatId,
      '<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Android:</b>\n\n' +
      '1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline –∏–∑ Google Play\n' +
      '2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á¬ª –∏–ª–∏ ¬´+¬ª\n' +
      '3. –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à VPN-–∫–ª—é—á, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –≤ –±–æ—Ç–µ\n' +
      '4. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É ‚Äî –≥–æ—Ç–æ–≤–æ!',
      {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [
              { text: '–°–∫–∞—á–∞—Ç—å –≤ Google Play', url: 'https://play.google.com/store/apps/details?id=org.outline.android.client' }
            ]
          ]
        }
      }
    );
    return;
  }
  if (query.data === 'howto_pc') {
    bot.sendMessage(chatId,
      '<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ü–ö (Windows/Mac/Linux):</b>\n\n' +
      '1. –°–∫–∞—á–∞–π—Ç–µ Outline Client\n' +
      '2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É\n' +
      '3. –ù–∞–∂–º–∏—Ç–µ ¬´–î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä¬ª –∏–ª–∏ ¬´+¬ª\n' +
      '4. –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à VPN-–∫–ª—é—á –∏–∑ –±–æ—Ç–∞\n' +
      '5. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É ‚Äî –≥–æ—Ç–æ–≤–æ!',
      {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [
              { text: '–°–∫–∞—á–∞—Ç—å Outline', url: 'https://getoutline.org/ru/get-started/' }
            ]
          ]
        }
      }
    );
    return;
  }
  if (query.data === 'howto_ios') {
    bot.sendMessage(chatId,
      '<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è iOS:</b>\n\n' +
      '1. –°–∫–∞—á–∞–π—Ç–µ Outline –∏–∑ App Store\n' +
      '2. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á¬ª –∏–ª–∏ ¬´+¬ª\n' +
      '3. –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à VPN-–∫–ª—é—á –∏–∑ –±–æ—Ç–∞\n' +
      '4. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É ‚Äî –≥–æ—Ç–æ–≤–æ!',
      {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [
              { text: '–°–∫–∞—á–∞—Ç—å –≤ App Store', url: 'https://apps.apple.com/app/outline-app/id1356177741' }
            ]
          ]
        }
      }
    );
    return;
  }
  // ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ...
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –∫–ª—é—á–∏"
bot.onText(/^üîë –ú–æ–∏ –∫–ª—é—á–∏$/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { data: user } = await supabase
    .from('users')
    .select('id, subscription_end')
    .eq('telegram_id', userId)
    .single();

  if (!user) {
    bot.sendMessage(chatId, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start');
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏
  const now = new Date();
  if (!user.subscription_end || new Date(user.subscription_end) < now) {
    bot.sendMessage(chatId, '‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏. –ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN.');
    return;
  }

  // –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ—Ä–≤–µ—Ä–∞—Ö
  const { data: keys } = await supabase
    .from('outline_keys')
    .select(`
      id,
      access_url,
      server:servers (
        name,
        country
      )
    `)
    .eq('user_id', user.id);

  if (!keys || keys.length === 0) {
    bot.sendMessage(chatId, '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π. –ö—É–ø–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä.');
    return;
  }

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª—é—á–∞–º–∏
  let message = 'üîë <b>–í–∞—à–∏ VPN –∫–ª—é—á–∏:</b>\n\n';
  keys.forEach((key, index) => {
    message += `${index + 1}. ${key.server.country}\n\n`;
    message += `<code>${key.access_url}</code>\n\n`;
  });

  bot.sendPhoto(chatId, path.join(__dirname, 'assets', 'photo.png'), {
    caption: message,
    parse_mode: 'HTML'
  }, {
    contentType: 'image/png'
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ CryptoBot (USDT)
bot.onText(/\/start paid_(\d+)_(\d+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const rub = Number(match[1]);
  // –ù–∞—Ö–æ–¥–∏–º –±–æ–Ω—É—Å –ø–æ —Å—É–º–º–µ
  const amount = CRYPTO_BOT_AMOUNTS.find(p => p.rub === rub);
  if (!amount) return;
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥
  const code = `BONUS-${userId}-${Date.now().toString(36).toUpperCase()}`;
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
  await supabase.from('promo_codes').insert([{
    code,
    days: amount.bonus,
    is_active: true,
    is_auto_generated: true,
    created_at: new Date().toISOString(),
    max_uses: 1,
    used_count: 0,
    user_id: userId
  }]);
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  bot.sendMessage(chatId, `üéÅ –í–∞—à –±–æ–Ω—É—Å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ ${amount.bonus} –¥–Ω–µ–π:\n<code>${code}</code>\n\n–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –µ–≥–æ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ü—Ä–æ–º–æ–∫–æ–¥"!`, { parse_mode: 'HTML' });
});

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
async function checkSubscriptionExpiration() {
  try {
    const now = new Date();
    const tomorrow = new Date(now);
    tomorrow.setDate(tomorrow.getDate() + 1);
    tomorrow.setHours(0, 0, 0, 0);

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫–∞—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
    const { data: expiringUsers } = await supabase
      .from('users')
      .select('telegram_id, subscription_end')
      .lt('subscription_end', tomorrow)
      .gt('subscription_end', now);

    if (expiringUsers) {
      for (const user of expiringUsers) {
        const endDate = new Date(user.subscription_end);
        const hoursLeft = Math.ceil((endDate - now) / (1000 * 60 * 60));
        
        if (hoursLeft <= 24) {
          bot.sendMessage(user.telegram_id, 
            '‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞!</b>\n\n' +
            '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.\n\n' +
            '–ù–∞–∂–º–∏—Ç–µ "üí≥ –ö—É–ø–∏—Ç—å/–ü—Ä–æ–¥–ª–∏—Ç—å" –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è.',
            { parse_mode: 'HTML' }
          );
        }
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
    const { data: expiredUsers } = await supabase
      .from('users')
      .select('telegram_id, subscription_end')
      .lt('subscription_end', now);

    if (expiredUsers) {
      for (const user of expiredUsers) {
        bot.sendMessage(user.telegram_id,
          '‚ùå <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞!</b>\n\n' +
          '–î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã VPN, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.\n\n' +
          '–ù–∞–∂–º–∏—Ç–µ "üí≥ –ö—É–ø–∏—Ç—å/–ü—Ä–æ–¥–ª–∏—Ç—å" –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è.',
          { parse_mode: 'HTML' }
        );
      }
    }
  } catch (error) {
    console.error('Error checking subscription expiration:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
setInterval(checkSubscriptionExpiration, 6 * 60 * 60 * 1000);

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
checkSubscriptionExpiration();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞
module.exports = bot;